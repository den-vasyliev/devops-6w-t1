name: KBOT-CICD

on:
  push:
    branches:
      - develop

permissions:
  contents: write

jobs:
  build_and_push:
    name: CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Run tests
        run: make test
      - name: Log in to registry
        run: echo "${{ secrets.GT_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push to ghcr.io
        run: make image-linux push-linux
        env:
          REGISTRY: ghcr.io

      - run: echo "VERSION=$(git describe --tags --abbrev=0)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - uses: mikefarah/yq@master
        with:
          cmd: yq -i '.image.tag=strenv(VERSION)' helm/values.yaml

      - run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git commit -am "Update image tag to $VERSION"
          git tag $VERSION
          git push origin $VERSION
  deploy:
    name: CD
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Set up k8s minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube start --driver=docker

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mkdir -p ~/.local/bin
          mv ./kubectl ~/.local/bin/kubectl

      - name: Install ArgoCD CLI
        run: |
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      - name: Deploy ArgoCD to Kubernetes
        run: |
          kubectl config use-context argocd
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
          kubectl port-forward svc/argocd-server -n argocd 8080:443
          echo "PASS=$(argocd admin initial-password -n argocd)"
          argocd login https://localhost:8080 --username admin --password $PASS
          argocd app set ottomenbot --image ghcr.io/ottomen/ottomenbot:$VERSION
          argocd app sync ottomenbot
